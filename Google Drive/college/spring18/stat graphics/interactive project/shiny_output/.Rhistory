# ---------- Loading Packages ----------
library(tidyverse)
library(plotly)
library(shiny)
library(radarchart)
library(dendextend)
# ---------- Loading Pokemon Dataset ----------
poke <- read.csv("Pokemon.csv")
namelist = as.list(poke$Name)
names(namelist) = poke$Name
# ---------- Colors data ----------
colors = data.frame(type = unique(poke$Type.1), color = c("darkolivegreen2", "darkorange1", "dodgerblue1", "darkolivegreen3", "cornsilk3", "darkmagenta", "gold1", "burlywood2", "lightpink1", "brown", "deeppink", "goldenrod4", "darkviolet", "darkslategray1", "darkslateblue", "chocolate4", "azure3", "mediumpurple1"))
# ---------- Stat Choices ----------
stat_choices = c("Total Points" = "Total", "Health Points" = "HP", "Attack Points" = "Attack", "Defense Points" = "Defense", "Special Attack" = "Sp..Atk", "Special Defense" = "Sp..Def", "Speed" = "Speed")
# ---------- Defining UI ----------
shinyUI(
ui <- fillPage(
navbarPage("Pokedex 2.0", fluid = TRUE,
tabPanel("Info",
mainPanel(h1("Welcome to the Pokedex 2.0"),
p("This is an analytical tool to compare statistics of different Pokemon types, generations, and more! Using the Pokemon Dataset from Kaggle, we have compiled many tools to help analyze which Pokemon are right for you. First, check out the 'Pokemon Stats' Tab to see statistics on individual Pokemon from all types and generations. Then, try out the 'Compare Types' Tab to see if a certain type of Pokemon fits your playstyle, or is more advantageous overall. Once you've found your favorite type, you can use the 'Choosing the Best Pokemon' Tab to see which Pokemon in that type are the most powerful. The most powerful Pokemon of all are the Legendary Pokemon of course. You can use the 'Legendaries' Tab to compare different Legendary Pokemon and decide which one to track down. The 'Generational History' Tab shows how the pokemon have changed through all six generations and which types have become more favorable over time. Under the 'More' Tab you can do your own analysis on the statistics of Pokemon and see what interesting findings you can make, as well as learn more about the creators of this app and the dataset. Enjoy!"))),
tabPanel("Pokemon Stats",
h2("Lookup Individual Pokemon Statistics"),
p("This page works just like a traditional Pokedex. Just type in the name of the Pokemon you want to get statistics for, and you can veiw all of that Pokemon's info!"),
shinyApp(
ui = fluidPage(
inputPanel(
selectizeInput("poke", label = "Search Pokemon:", choices = namelist,
options = namelist, multiple = FALSE)
),
tableOutput("poke_plot")
),
server = function(input, output) {
output$poke_plot <- renderTable({
poke.mat <- as.matrix(poke[which(poke$Name == input$poke), -1])
colnames(poke.mat) <- c("Name", "Primary Type", "Secondary Type", "Total Points", "Health Points", "Attack Points", "Defense Points", "Special Attack", "Special Defense", "Speed", "Generation", "Ledendary")
rownames(poke.mat) <- ""
poke.mat <- t(poke.mat)
poke.tab <- as.table(poke.mat)
poke.tab
}, rownames = FALSE, colnames = FALSE)
},
options = list(height = 1100)
)
),
navbarMenu("Compare Types",
tabPanel("Radar Plot",
h2("Radar Plot"),
p("Here, you can produce a radar plot comparing all Pokemon types and their average statistics. Select what types you want to compare and see if you can find the best type that matches your play style, or would be advantageous in an upcoming battle! Click the 'Include Legendary?' button to include legendary Pokemon in your averages. Be sure to check out the Density Plot to get a more detailed veiw of the distribution of Pokemon within your favorite types!"),
shinyApp(
ui = fluidPage(
inputPanel(
checkboxGroupInput("type", label = "Types:",
choices = c("Grass", "Fire", "Water", "Bug", "Normal", "Poison", "Electric", "Ground", "Fairy", "Fighting", "Psychic", "Rock", "Ghost", "Ice", "Dragon", "Dark", "Steel", "Flying"), inline = TRUE),
checkboxInput("legend", label = "Include Legendary?", FALSE)
),
chartJSRadarOutput("poke_plot", height = 300)
),
server = function(input, output) {
output$poke_plot <- renderChartJSRadar({
if(input$legend == FALSE) {
poke <- poke[which(poke$Legendary == "False"),]
}
scores <- list(
"Grass" = c(mean(poke$HP[which(poke$Type.1 == "Grass" | poke$Type.2 == "Grass")]),
mean(poke$Attack[which(poke$Type.1 == "Grass" | poke$Type.2 == "Grass")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Grass" | poke$Type.2 == "Grass")]),
mean(poke$Speed[which(poke$Type.1 == "Grass" | poke$Type.2 == "Grass")]),
mean(poke$Defense[which(poke$Type.1 == "Grass" | poke$Type.2 == "Grass")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Grass" | poke$Type.2 == "Grass")])),
"Fire" = c(mean(poke$HP[which(poke$Type.1 == "Fire" | poke$Type.2 == "Fire")]),
mean(poke$Attack[which(poke$Type.1 == "Fire" | poke$Type.2 == "Fire")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Fire" | poke$Type.2 == "Fire")]),
mean(poke$Speed[which(poke$Type.1 == "Fire" | poke$Type.2 == "Fire")]),
mean(poke$Defense[which(poke$Type.1 == "Fire" | poke$Type.2 == "Fire")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Fire" | poke$Type.2 == "Fire")])),
"Water" = c(mean(poke$HP[which(poke$Type.1 == "Water" | poke$Type.2 == "Water")]),
mean(poke$Attack[which(poke$Type.1 == "Water" | poke$Type.2 == "Water")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Water" | poke$Type.2 == "Water")]),
mean(poke$Speed[which(poke$Type.1 == "Water" | poke$Type.2 == "Water")]),
mean(poke$Defense[which(poke$Type.1 == "Water" | poke$Type.2 == "Water")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Water" | poke$Type.2 == "Water")])),
"Bug" = c(mean(poke$HP[which(poke$Type.1 == "Bug" | poke$Type.2 == "Bug")]),
mean(poke$Attack[which(poke$Type.1 == "Bug" | poke$Type.2 == "Bug")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Bug" | poke$Type.2 == "Bug")]),
mean(poke$Speed[which(poke$Type.1 == "Bug" | poke$Type.2 == "Bug")]),
mean(poke$Defense[which(poke$Type.1 == "Bug" | poke$Type.2 == "Bug")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Bug" | poke$Type.2 == "Bug")])),
"Normal" = c(mean(poke$HP[which(poke$Type.1 == "Normal" | poke$Type.2 == "Normal")]),
mean(poke$Attack[which(poke$Type.1 == "Normal" | poke$Type.2 == "Normal")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Normal" | poke$Type.2 == "Normal")]),
mean(poke$Speed[which(poke$Type.1 == "Normal" | poke$Type.2 == "Normal")]),
mean(poke$Defense[which(poke$Type.1 == "Normal" | poke$Type.2 == "Normal")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Normal" | poke$Type.2 == "Normal")])),
"Poison" = c(mean(poke$HP[which(poke$Type.1 == "Poison" | poke$Type.2 == "Poison")]),
mean(poke$Attack[which(poke$Type.1 == "Poison" | poke$Type.2 == "Poison")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Poison" | poke$Type.2 == "Poison")]),
mean(poke$Speed[which(poke$Type.1 == "Poison" | poke$Type.2 == "Poison")]),
mean(poke$Defense[which(poke$Type.1 == "Poison" | poke$Type.2 == "Poison")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Poison" | poke$Type.2 == "Poison")])),
"Electric" = c(mean(poke$HP[which(poke$Type.1 == "Electric" | poke$Type.2 == "Electric")]),
mean(poke$Attack[which(poke$Type.1 == "Electric" | poke$Type.2 == "Electric")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Electric" | poke$Type.2 == "Electric")]),
mean(poke$Speed[which(poke$Type.1 == "Electric" | poke$Type.2 == "Electric")]),
mean(poke$Defense[which(poke$Type.1 == "Electric" | poke$Type.2 == "Electric")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Electric" | poke$Type.2 == "Electric")])),
"Ground" = c(mean(poke$HP[which(poke$Type.1 == "Ground" | poke$Type.2 == "Ground")]),
mean(poke$Attack[which(poke$Type.1 == "Ground" | poke$Type.2 == "Ground")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Ground" | poke$Type.2 == "Ground")]),
mean(poke$Speed[which(poke$Type.1 == "Ground" | poke$Type.2 == "Ground")]),
mean(poke$Defense[which(poke$Type.1 == "Ground" | poke$Type.2 == "Ground")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Ground" | poke$Type.2 == "Ground")])),
"Fairy" = c(mean(poke$HP[which(poke$Type.1 == "Fairy" | poke$Type.2 == "Fairy")]),
mean(poke$Attack[which(poke$Type.1 == "Fairy" | poke$Type.2 == "Fairy")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Fairy" | poke$Type.2 == "Fairy")]),
mean(poke$Speed[which(poke$Type.1 == "Fairy" | poke$Type.2 == "Fairy")]),
mean(poke$Defense[which(poke$Type.1 == "Fairy" | poke$Type.2 == "Fairy")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Fairy" | poke$Type.2 == "Fairy")])),
"Fighting" = c(mean(poke$HP[which(poke$Type.1 == "Fighting" | poke$Type.2 == "Fighting")]),
mean(poke$Attack[which(poke$Type.1 == "Fighting" | poke$Type.2 == "Fighting")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Fighting" | poke$Type.2 == "Fighting")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Fighting" | poke$Type.2 == "Fighting")]),
mean(poke$Defense[which(poke$Type.1 == "Fighting" | poke$Type.2 == "Fighting")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Fighting" | poke$Type.2 == "Fighting")])),
"Psychic" = c(mean(poke$HP[which(poke$Type.1 == "Psychic" | poke$Type.2 == "Psychic")]),
mean(poke$Attack[which(poke$Type.1 == "Psychic" | poke$Type.2 == "Psychic")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Psychic" | poke$Type.2 == "Psychic")]),
mean(poke$Speed[which(poke$Type.1 == "Psychic" | poke$Type.2 == "Psychic")]),
mean(poke$Defense[which(poke$Type.1 == "Psychic" | poke$Type.2 == "Psychic")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Psychic" | poke$Type.2 == "Psychic")])),
"Rock" = c(mean(poke$HP[which(poke$Type.1 == "Rock" | poke$Type.2 == "Rock")]),
mean(poke$Attack[which(poke$Type.1 == "Rock" | poke$Type.2 == "Rock")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Rock" | poke$Type.2 == "Rock")]),
mean(poke$Speed[which(poke$Type.1 == "Rock" | poke$Type.2 == "Rock")]),
mean(poke$Defense[which(poke$Type.1 == "Rock" | poke$Type.2 == "Rock")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Rock" | poke$Type.2 == "Rock")])),
"Ghost" = c(mean(poke$HP[which(poke$Type.1 == "Ghost" | poke$Type.2 == "Ghost")]),
mean(poke$Attack[which(poke$Type.1 == "Ghost" | poke$Type.2 == "Ghost")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Ghost" | poke$Type.2 == "Ghost")]),
mean(poke$Speed[which(poke$Type.1 == "Ghost" | poke$Type.2 == "Ghost")]),
mean(poke$Defense[which(poke$Type.1 == "Ghost" | poke$Type.2 == "Ghost")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Ghost" | poke$Type.2 == "Ghost")])),
"Ice" = c(mean(poke$HP[which(poke$Type.1 == "Ice" | poke$Type.2 == "Ice")]),
mean(poke$Attack[which(poke$Type.1 == "Ice" | poke$Type.2 == "Ice")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Ice" | poke$Type.2 == "Ice")]),
mean(poke$Speed[which(poke$Type.1 == "Ice" | poke$Type.2 == "Ice")]),
mean(poke$Defense[which(poke$Type.1 == "Ice" | poke$Type.2 == "Ice")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Ice" | poke$Type.2 == "Ice")])),
"Dragon" = c(mean(poke$HP[which(poke$Type.1 == "Dragon" | poke$Type.2 == "Dragon")]),
mean(poke$Attack[which(poke$Type.1 == "Dragon" | poke$Type.2 == "Dragon")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Dragon" | poke$Type.2 == "Dragon")]),
mean(poke$Speed[which(poke$Type.1 == "Dragon" | poke$Type.2 == "Dragon")]),
mean(poke$Defense[which(poke$Type.1 == "Dragon" | poke$Type.2 == "Dragon")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Dragon" | poke$Type.2 == "Dragon")])),
"Dark" = c(mean(poke$HP[which(poke$Type.1 == "Dark" | poke$Type.2 == "Dark")]),
mean(poke$Attack[which(poke$Type.1 == "Dark" | poke$Type.2 == "Dark")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Dark" | poke$Type.2 == "Dark")]),
mean(poke$Speed[which(poke$Type.1 == "Dark" | poke$Type.2 == "Dark")]),
mean(poke$Defense[which(poke$Type.1 == "Dark" | poke$Type.2 == "Dark")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Dark" | poke$Type.2 == "v")])),
"Steel" = c(mean(poke$HP[which(poke$Type.1 == "Steel" | poke$Type.2 == "Steel")]),
mean(poke$Attack[which(poke$Type.1 == "Steel" | poke$Type.2 == "Steel")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Steel" | poke$Type.2 == "Steel")]),
mean(poke$Speed[which(poke$Type.1 == "Steel" | poke$Type.2 == "Steel")]),
mean(poke$Defense[which(poke$Type.1 == "Steel" | poke$Type.2 == "Steel")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Steel" | poke$Type.2 == "Steel")])),
"Flying" = c(mean(poke$HP[which(poke$Type.1 == "Flying" | poke$Type.2 == "Flying")]),
mean(poke$Attack[which(poke$Type.1 == "Flying" | poke$Type.2 == "Flying")]),
mean(poke$Sp..Atk[which(poke$Type.1 == "Flying" | poke$Type.2 == "Flying")]),
mean(poke$Speed[which(poke$Type.1 == "Flying" | poke$Type.2 == "Flying")]),
mean(poke$Defense[which(poke$Type.1 == "Flying" | poke$Type.2 == "Flying")]),
mean(poke$Sp..Def[which(poke$Type.1 == "Flying" | poke$Type.2 == "Flying")]))
)
coluhs = apply(colors[2], 1, col2rgb)
colnames(coluhs) = c("Grass", "Fire", "Water", "Bug", "Normal", "Poison", "Electric", "Ground", "Fairy", "Fighting", "Psychic", "Rock", "Ghost", "Ice", "Dragon", "Dark", "Steel", "Flying")
plot1 <- chartJSRadar(labs = c("Health Points", "Attack Points", "Special Attack", "Speed", "Defense Points", "Special Defense"), scores = scores[input$type], colMatrix = as.matrix(coluhs[,input$type]), maxScale = 120)
plot1
})
},
options = list(height = 1100)
)),
tabPanel("Density Plot",
h2("Density Plots by Type"),
p("Here, you can produce density plots to see how the Pokemon within each type are distributed by their statistics. Does your favorite type have lots of high powered Pokemon, or just a few? Select multiple types to overlay their density plots and compare!"),
shinyApp(
ui = fluidPage(
inputPanel(
checkboxGroupInput("which_type", label = "Types:",
choices = c("Grass", "Fire", "Water", "Bug", "Normal", "Poison", "Electric", "Ground", "Fairy", "Fighting", "Psychic", "Rock", "Ghost", "Ice", "Dragon", "Dark", "Steel", "Flying"), selected = "Grass", inline = TRUE),
selectInput("stat", label = "Statistic:", choices = stat_choices, selected =
"Grass")
),
plotlyOutput("poke_plot", height = 600)
),
server = function(input, output) {
output$poke_plot <- renderPlotly({
poke1 = poke[, -4]
poke2 = poke[, -3]
colnames(poke2)[3] <- "Type.1"
poke2 <- poke2[-which(poke2$Type.1 == ""), ]
big.poke <- rbind(poke1, poke2)
p <- ggplot(poke[which(big.poke$Type.1 == input$which_type),], aes_string(x = input$stat)) +
geom_density(aes(fill = Type.1, color = Type.1), alpha = .5) +
scale_fill_manual(values = c("Grass" = "darkolivegreen2", "Fire" = "darkorange1", "Water" = "dodgerblue1", "Bug" = "darkolivegreen3", "Normal" = "cornsilk3", "Poison" = "darkmagenta", "Electric" = "gold1", "Ground" = "burlywood2", "Fairy" = "lightpink1", "Fighting" = "brown", "Psychic" = "deeppink", "Rock" = "goldenrod4", "Ghost" = "darkviolet", "Ice" = "darkslategray1", "Dragon" = "darkslateblue", "Dark" = "chocolate4", "Steel" = "azure3", "Flying" = "mediumpurple1")) +
scale_color_manual(values = c("Grass" = "darkolivegreen2", "Fire" = "darkorange1", "Water" = "dodgerblue1", "Bug" = "darkolivegreen3", "Normal" = "cornsilk3", "Poison" = "darkmagenta", "Electric" = "gold1", "Ground" = "burlywood2", "Fairy" = "lightpink1", "Fighting" = "brown", "Psychic" = "deeppink", "Rock" = "goldenrod4", "Ghost" = "darkviolet", "Ice" = "darkslategray1", "Dragon" = "darkslateblue", "Dark" = "chocolate4", "Steel" = "azure3", "Flying" = "mediumpurple1")) +
labs(x = names(stat_choices[stat_choices==input$stat]),
y = "Density",
title = "Density of Pokemon Statistic per Type",
color = "Type",
fill = "Type")
ggplotly(p)
})
},
options = list(height = 1100)
))),
tabPanel("Choosing the Best Pokemon",
h2("All Pokemon Stats by Type"),
p("Here, you can compare all regular Pokemon in your chosen type. Select your favorite type and statistic of comparison and refer to the resulting bar plot showing all regular Pokemon of that type and their statistic!"),
shinyApp(
ui = fluidPage(
inputPanel(
selectInput("type", label = "Type:",
choices = c("Grass", "Fire", "Water", "Bug", "Normal", "Poison", "Electric", "Ground", "Fairy", "Fighting", "Psychic", "Rock", "Ghost", "Ice", "Dragon", "Dark", "Steel", "Flying"), selected = "Grass"),
selectInput("stat", label = "Statistic:",
choices = stat_choices)
),
plotOutput("poke_plot", height = 1000)
),
server = function(input, output) {
output$poke_plot <- renderPlot({
poke <- poke[which(poke$Legendary == "False"), ]
plot1 <- ggplot(poke[which(poke$Type.1 == input$type | poke$Type.2 == input$type),]) +
geom_bar(aes_string(x = paste0("reorder(Name,",input$stat, ")"), y = input$stat), stat = "identity", position = "dodge", fill = colors[which(colors$type == input$type), 2], color = "black") +
theme(axis.text.x = element_text(hjust = 1, vjust = 1)) +
coord_flip() +
labs(title = paste(names(stat_choices[stat_choices==input$stat]) , "of", input$type, "Pokemon"),
y = names(stat_choices[stat_choices==input$stat]),
x = "Pokemon")
plot1
})
},
options = list(height = 1200)
)
),
navbarMenu("Legendaries",
tabPanel("Legendaries by Statistic",
h1("Bar Plots of Legendary Pokemon"),
p("Here, you can compare Legendary Pokemon by their statistics. Select which types of Legendaries you want to compare and your statistic of interest and see which legendaries are more powerful!"),
shinyApp(
ui = fluidPage(
inputPanel(
checkboxGroupInput("mytype", label = "Types:",
choices = c("Normal", "Grass", "Fire", "Water", "Bug",
"Poison", "Electric", "Ground", "Fairy",
"Fighting", "Psychic", "Rock", "Ghost",
"Ice", "Dragon", "Dark", "Steel", "Flying"),
selected = "Normal",
inline = TRUE),
selectInput("mystat", "Statistic:",
choices = c("Total Points" = "Total",
"Health Points" = "HP",
"Attack Points" = "Attack",
"Defense Points" = "Defense",
"Special Attack" = "`Sp. Atk`",
"Special Defence" = "`Sp. Def`",
"Speed" = "Speed"),
selected = "Total Points")
),
plotlyOutput("legendary_stats_plot", height = 600)
),
server = function(input, output) {
output$legendary_stats_plot <- renderPlotly({
pokemon <- read_csv("Pokemon.csv")
legendaries <- subset(pokemon, Legendary == "True")
pokemon_colors <- data.frame(type = unique(pokemon$`Type 1`), color = c("darkolivegreen2", "darkorange1", "dodgerblue1", "darkolivegreen3", "cornsilk3", "darkmagenta", "gold1", "burlywood2", "lightpink1", "brown", "deeppink", "goldenrod4", "darkviolet", "darkslategray1", "darkslateblue", "chocolate4", "azure3", "mediumpurple1"))
to_examine <- subset(legendaries, `Type 1` %in% input$mytype | `Type 2` %in% input$mytype)
to_examine <- mutate(to_examine, Type = ifelse(`Type 1` %in% input$mytype, `Type 1`, `Type 2`))
myplot <- ggplot(to_examine, aes_string(x = paste("reorder(Name, -", input$mystat, ")"), y = input$mystat, fill = "Type")) +
geom_bar(stat = "identity") + #, fill = "steelblue3") +
labs(title = "Lengendary Pokemon Statistics",
x = "Name",
y = names(stat_choices[stat_choices==input$mystat])) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(values = c("Grass" = "darkolivegreen2",
"Fire" = "darkorange1",
"Water" = "dodgerblue1",
"Bug" = "darkolivegreen3",
"Normal" = "cornsilk3",
"Poison" = "darkmagenta",
"Electric" = "gold1",
"Ground" = "burlywood2",
"Fairy" = "lightpink1",
"Fighting" = "brown",
"Psychic" = "deeppink",
"Rock" = "goldenrod4",
"Ghost" = "darkviolet",
"Ice" = "darkslategray1",
"Dragon" = "darkslateblue",
"Dark" = "chocolate4",
"Steel" = "azure3",
"Flying" = "mediumpurple1"))
ggplotly(myplot)
})
},
options = list(height = 1100)
)),
tabPanel("Grouping Legendaries",
h2("Grouping Legendary Pokemon by Statistics"),
p("Ledendary Pokemon can be placed in groups based on their statistics. Are your favorite Legendaries really better than other ones, or are their stats very similar? We can group them by many statistics. Select which types of Legendaries you would like to group and what statistics on which to group them. The more distance there is plotted for two Pokemon, the more statistically different they are!"),
shinyApp(
ui = fluidPage(
inputPanel(
checkboxGroupInput("mytype", label = "Types:",
choices = c("Normal", "Grass", "Fire", "Water", "Bug",
"Poison", "Electric", "Ground", "Fairy",
"Fighting", "Psychic", "Rock", "Ghost",
"Ice", "Dragon", "Dark", "Steel", "Flying"),
selected = c("Fire", "Water"),
inline = TRUE),
checkboxGroupInput("mystat", h3("Interested Statistic(s):"),
choices = c("Total", "HP", "Attack", "Defense",
"Special Attack" = "Sp. Atk",
"Special Defense" = "Sp. Def", "Speed"),
selected = c("HP", "Attack"))
),
plotOutput("dend", height = 600)
),
server = function(input, output) {
output$dend <- renderPlot({
pokemon <- read_csv("Pokemon.csv")
legendaries <- subset(pokemon, Legendary == "True")
pokemon_colors <- data.frame(type = unique(pokemon$`Type 1`), color = c("darkolivegreen2", "darkorange1", "dodgerblue1", "darkolivegreen3", "cornsilk3", "darkmagenta", "gold1", "burlywood2", "lightpink1", "brown", "deeppink", "goldenrod4", "darkviolet", "darkslategray1", "darkslateblue", "chocolate4", "azure3", "mediumpurple1"))
poke_colors <- c("Grass" = "darkolivegreen2",
"Fire" = "darkorange1",
"Water" = "dodgerblue1",
"Bug" = "darkolivegreen3",
"Normal" = "cornsilk3",
"Poison" = "darkmagenta",
"Electric" = "gold1",
"Ground" = "burlywood2",
"Fairy" = "lightpink1",
"Fighting" = "brown",
"Psychic" = "deeppink",
"Rock" = "goldenrod4",
"Ghost" = "darkviolet",
"Ice" = "darkslategray1",
"Dragon" = "darkslateblue",
"Dark" = "chocolate4",
"Steel" = "azure3",
"Flying" = "mediumpurple1")
to_examine <- subset(legendaries, `Type 1` %in% input$mytype | `Type 2` %in% input$mytype)
to_examine <- mutate(to_examine, Type = ifelse(`Type 1` %in% input$mytype, `Type 1`, `Type 2`))
to_examine <- mutate(to_examine, color = poke_colors[Type])
mysubset <- to_examine[c("Name", "Type", input$mystat)] %>%
remove_rownames() %>%
column_to_rownames(var = "Name")
mydist <- dist(mysubset) %>% round(1)
mydend <- hclust(mydist, method = "single") %>% as.dendrogram
mydend <- mydend %>%
set("labels_cex", .75) %>%
set("labels_col", poke_colors[mysubset$Type], order_value = TRUE)
myplot <- ggplot(mydend, theme = NULL, horiz = TRUE) +
labs(title = "Comparing Legendary Pokemon Similarities",
subtitle = "Colored By Type",
x = "Legendary Pokemon Names",
y = "Distance") +
theme(axis.text.y = element_blank())
myplot
})
},
options = list(height = 1200)
))
),
navbarMenu("Generational History",
tabPanel("How Types Have Changed",
h2("Regression of Type Statistics Through Generations"),
p("Here, you can examine how the statistics of certain types have changed through the generations. Select which type and statistic to examine and see a scatterplot with regression line of these statistics. Is your favorite type getting more powerful with each generation?"),
shinyApp(
ui = fluidPage(
inputPanel(
radioButtons("which_type", label = "Type:",
choices = c("Grass", "Fire", "Water", "Bug", "Normal", "Poison", "Electric", "Ground", "Fairy", "Fighting", "Psychic", "Rock", "Ghost", "Ice", "Dragon", "Dark", "Steel", "Flying"), selected = "Grass", inline = TRUE),
selectInput("stat", label = "Statistic:", choices = stat_choices, selected =
"Grass")
),
plotlyOutput("poke_plot")
),
server = function(input, output) {
output$poke_plot <- renderPlotly({
p <- ggplot(poke[which(poke$Type.1 == input$which_type | poke$Type.2 == input$which_type),],
aes_string(x = "Generation", y = input$stat)) +
geom_point(color = colors[which(colors$type == input$which_type), 2]) +
geom_smooth(span = 2, color = "gray", se = FALSE)+
labs(x = "Generation",
y = names(stat_choices[stat_choices==input$stat]),
title = paste(names(stat_choices[stat_choices==input$stat]), "of", input$which_type,"Pokemon across Generations")) +
scale_x_continuous(breaks = 1:6)
ggplotly(p)
})
},
options = list(height = 1100)
)),
tabPanel("Do Generations Favor Types?",
h2("Comparing Types Over Generations"),
p("Some types may be more powerful than others in different generations of Pokemon. If you're playing an older game, there might be differences in the average statistics of each type. Here, we can compare types through generations! Select which types you'd like to compare and see how they stack up in different generations."),
shinyApp(
ui = fluidPage(
inputPanel(
checkboxGroupInput("type", label = "Type:",
choices = c("Grass", "Fire", "Water", "Bug", "Normal",
"Poison", "Electric", "Ground", "Fairy",
"Fighting", "Psychic", "Rock", "Ghost", "Ice",
"Dragon", "Dark", "Steel", "Flying"),
selected = c("Grass", "Fire", "Water"),
inline = TRUE),
selectInput("stat", label = "Statistic:", choices = stat_choices)
),
plotlyOutput("poke_plot", height = 600)
),
server = function(input, output) {
output$poke_plot <- renderPlotly({
poke1 = poke[, -4]
poke2 = poke[, -3]
colnames(poke2)[3] <- "Type.1"
poke2 <- poke2[-which(poke2$Type.1 == ""), ]
big.poke <- rbind(poke1, poke2)
poke_type_gen <- big.poke %>% group_by(Type.1, Generation) %>%
summarise(Total = mean(Total),
HP = mean(HP),
Attack = mean(Attack),
Defense = mean(Defense),
Sp..Atk = mean(Sp..Atk),
Sp..Def = mean(Sp..Def),
Speed = mean(Speed))
type_df <- poke_type_gen[which(poke_type_gen$Type.1 %in% input$type),]
p2 <- ggplot(type_df, aes_string(x = "Generation", y = input$stat, color = "Type.1")) +
#geom_bar(stat = "identity", pos = "dodge") +
geom_point() + geom_line() +
scale_color_manual(values = c("Grass" = "darkolivegreen2", "Fire" = "darkorange1", "Water" = "dodgerblue1", "Bug" = "darkolivegreen3", "Normal" = "cornsilk3", "Poison" = "darkmagenta", "Electric" = "gold1", "Ground" = "burlywood2", "Fairy" = "lightpink1", "Fighting" = "brown", "Psychic" = "deeppink", "Rock" = "goldenrod4", "Ghost" = "darkviolet", "Ice" = "darkslategray1", "Dragon" = "darkslateblue", "Dark" = "chocolate4", "Steel" = "azure3", "Flying" = "mediumpurple1")) +
labs(title = paste("Generational Changes of Average", names(stat_choices[stat_choices==input$stat]) ,"for Pokemon Types"),
color = "Type",
y = paste("Average", names(stat_choices[stat_choices==input$stat]))) +
scale_x_continuous(breaks = 1:6)
ggplotly(p2)
})
},
options = list(height = 1000)
)
)),
navbarMenu("More",
tabPanel("Make Your Own Statistical Comparisons",
h2("Compare Your Own Statistics"),
p("Here, you can compare many statistics and draw some interesting conclusions of your own. Select two statistics to examine among types and generations of your choice, and generate a scatterplot of your data! Click the 'Add Regression Line' button to include a smooth regression line in your plot. What interesting things about Pokemon statistics can you find?"),
shinyApp(
ui = fluidPage(
inputPanel(
checkboxGroupInput("type", label = "Type:",
choices = c("Grass", "Fire", "Water", "Bug", "Normal",
"Poison", "Electric", "Ground", "Fairy",
"Fighting", "Psychic", "Rock", "Ghost", "Ice",
"Dragon", "Dark", "Steel", "Flying"),
selected = c("Grass", "Bug", "Poison"),
inline = TRUE),
checkboxGroupInput("generation", label = "Generation:",
choices = 1:6,
selected = 4:6),
selectInput("stat1", label = "X-Statistic:", choices = stat_choices,
selected = "Attack"),
selectInput("stat2", label = "Y-Statistic:", choices = stat_choices,
selected = "Defense"),
checkboxInput("reg", label = "Add Regression Line?")
),
plotlyOutput("poke_plot", height = 600)
),
server = function(input, output) {
output$poke_plot <- renderPlotly({
types_df <- poke[which(poke$Type.1 %in% input$type),]
types_df <- types_df[which(types_df$Generation %in% input$generation),]
print(input$stat)
p2 <- ggplot(types_df, aes_string(x = input$stat1, y = input$stat2)) +
geom_point(aes_string(color = "Type.1")) +
scale_color_manual(values = c("Grass" = "darkolivegreen2", "Fire" = "darkorange1", "Water" = "dodgerblue1", "Bug" = "darkolivegreen3", "Normal" = "cornsilk3", "Poison" = "darkmagenta", "Electric" = "gold1", "Ground" = "burlywood2", "Fairy" = "lightpink1", "Fighting" = "brown", "Psychic" = "deeppink", "Rock" = "goldenrod4", "Ghost" = "darkviolet", "Ice" = "darkslategray1", "Dragon" = "darkslateblue", "Dark" = "chocolate4", "Steel" = "azure3", "Flying" = "mediumpurple1")) +
labs(title = "Pokemon Trait Comparisons",
color = "Type",
x = names(stat_choices[stat_choices==input$stat1]),
y = names(stat_choices[stat_choices==input$stat2]))
if(input$reg == TRUE) { p2 = p2 + geom_smooth(color = "black", span = 2, se = FALSE) }
ggplotly(p2)
})
},
options = list(height = 1100)
)),
tabPanel("Credits",
p("App creators:"), br(), p("William Shancey"),p("Andre Aquije Flores"), p("Korrawat Jianthanakanon"), p("Nicholas Sclafani"), br(),br(), p("Dataset: 'Pokemon with stats' from Kaggle"), p("https://www.kaggle.com/abcsds/pokemon/data")))
)
)
)
runApp('~/Downloads/f08d6d775313418b9545a3fc4723ffb7')
